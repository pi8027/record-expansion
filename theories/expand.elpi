pred build-copy-head-clause i:term, i:term, o:prop.
build-copy-head-clause (app In) Out Clause :- !,
  (pi args\ std.append In args (In' args)),
  Clause = (pi args out\ copy (app (In' args)) out :- coq.mk-app Out args out).
build-copy-head-clause In Out Clause :- !,
  Clause = (copy In Out,
            pi args out\ copy (app [In|args]) out :- coq.mk-app Out args out).

% Build a function, but avoid an eta-expansion.
pred coq.mk-fun i:name, i:term, i:term -> term, o:term.
coq.mk-fun _ _ (x\ app [HD|F x]) Out :-
  (pi x\ sigma XS YS\
    std.length (F x) N,
    N' is N - 1, 0 =< N',
    std.split-at N' (F x) XS YS,
    XS' = XS, YS = [x]), !,
  coq.mk-app HD XS' Out.
coq.mk-fun N Ty F (fun N Ty F) :- !.

% Build a [let], but avoid [let x := t1 in t2] where [x] does not occur in [t2].
pred coq.mk-let i:name, i:term, i:term i:term -> term, o:term.
coq.mk-let _ _ _ (_\ T) T :- !.
coq.mk-let N Ty T F (let N Ty T F) :- !.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
kind ctx type -> type.
type ctx-let name -> term -> term -> (term -> ctx A) -> ctx A.
type ctx-end A -> ctx A.

pred join-ctx i:ctx A, i:A -> ctx B -> prop, o:ctx B.
join-ctx (ctx-let N Ty T A) P (ctx-let N Ty T B) :- !,
  @pi-decl N Ty x\ join-ctx (A x) P (B x).
join-ctx (ctx-end A) P B :- !, P A B.
join-ctx A P B :- !, coq.error (join-ctx A P B).

pred map-ctx i:ctx A, i:A -> B -> prop, o:ctx B.
map-ctx A P B :- !, join-ctx A (x\ z\ sigma y\ P x y, z = ctx-end y) B.
map-ctx A P B :- !, coq.error (map-ctx A P B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
pred push-fun-ctx-let i:name, i:term, i:term -> term, i:list term,
                      i:term -> ctx (term -> term), o:ctx (term -> term).
push-fun-ctx-let N Ty T VS
                 (y\ ctx-let N' Ty' T' (C y)) (ctx-let N' Ty' T' C') :- !,
  std.forall VS (v\ not (occurs v Ty'; occurs v T')),
  pi z\ push-fun-ctx-let N Ty T VS (y\ C y z) (C' z).
push-fun-ctx-let N Ty T VS
                 (y\ ctx-let N' (Ty' y) (T' y) (C y))
                 (ctx-let N' (prod N Ty Ty'') T''' C') :- !,
  (pi y\ sigma Clauses\
    std.map VS (v\ p\ build-copy-head-clause v (app [v, y]) p) Clauses,
    Clauses => copy (Ty' y) (Ty'' y), copy (T' y) (T'' y)),
  coq.mk-fun N Ty T'' T''',
  pi z\ push-fun-ctx-let N Ty T [z|VS] (y\ C y z) (C' z).
push-fun-ctx-let _ _ T VS (y\ ctx-end (C y)) (ctx-end C') :- !,
  pi x\ sigma Clauses\
    std.map VS (v\ p\ build-copy-head-clause v (app [v, T x]) p) Clauses,
    Clauses => copy (C (T x) x) (C' x).
push-fun-ctx-let N Ty T VS C C' :- !,
  coq.error (push-fun-ctx-let N Ty T VS C C').

pred push-fun-ctx i:term -> ctx (ctx term), o:ctx (term -> term).
push-fun-ctx (x\ ctx-let N Ty (T x) (y\ C x y)) C'' :- !,
  (pi y\ push-fun-ctx (x\ C x y) (C' y)),
  push-fun-ctx-let N Ty T [] C' C''.
push-fun-ctx (_\ ctx-end C) C' :- !, map-ctx C (t\ f\ f = _\ t) C'.
push-fun-ctx C C' :- !, coq.error (push-fun-ctx C C').

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
pred push-let-ctx-let i:name, i:term, i:term, i:term -> ctx term, o:ctx term.
push-let-ctx-let N Ty T (x\ ctx-let N' (TyF' x) (TF' x) (C x))
                        (ctx-let N' Ty' T' C') :- !,
  coq.mk-let N Ty T TyF' Ty',
  coq.mk-let N Ty T TF' T',
  pi y\ push-let-ctx-let N Ty T (x\ C x y) (C' y).
push-let-ctx-let N Ty T C C' :- !, coq.error (push-let-ctx-let N Ty T C C').

pred push-let-ctx i:ctx (ctx term), o:ctx term.
push-let-ctx (ctx-let N Ty T C) C'' :- !,
  (pi x\ push-let-ctx (C x) (C' x)), push-let-ctx-let N Ty T C' C''.
push-let-ctx (ctx-end C) C :- !.
push-let-ctx C C' :- !, coq.error (push-let-ctx C C').

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
pred expand-fun-record i:term, i:list term, i:list term, o:ctx term.
expand-fun-record (prod N Ty Bo) RevApp [F|FS] Out :- !,
  join-ctx {expand-fun N Ty F}
    (t1\ expand-fun-record (Bo t1) [t1|RevApp] FS) Out.
expand-fun-record (let _ _ T Bo) RevApp [_|FS] Out :- !,
  expand-fun-record (Bo T) RevApp FS Out.
expand-fun-record _ RevApp [] (ctx-end (app Out)) :- !, std.rev RevApp Out.
expand-fun-record Ty RevApp FS Out :- !,
  coq.error (expand-fun-record Ty RevApp FS Out).

pred expand-fun-whd i:name, i:term, i:term, o:ctx term.
expand-fun-whd N (prod N' Ty Bo) X Out :- !,
  (pi y\ coq.mk-app X [y] (AppX y)),
  (@pi-decl N' Ty y\
    expand-fun N' Ty y (Out1 y),
    map-ctx (Out1 y) (y'\ expand-fun N (Bo y') (AppX y')) (Out2 y)),
  map-ctx {push-fun-ctx Out2} (coq.mk-fun N' Ty) Out.
expand-fun-whd _ Ty X Out :-
  coq.safe-dest-app Ty (global (indt RHD)) TyArgs,
  expand-record RHD NParams K KTy Projs, !,
  std.assert! (std.length TyArgs NParams) "expand-fun-whd: arity mismatch",
  std.append TyArgs [X] ProjArgs,
  std.map Projs (p\ t\ coq.mk-app (global (const p)) ProjArgs t) Fields,
  expand-fun-record
    {coq.subst-prod TyArgs KTy} {std.rev [global (indc K)|TyArgs]} Fields Out.
expand-fun-whd N Ty X (ctx-let N Ty X ctx-end) :- !.
expand-fun-whd N Ty X Out :- !, coq.error (expand-fun-whd N Ty X Out).

pred expand-fun i:name, i:term, i:term, o:ctx term.
expand-fun N Ty X Out :- !,
  expand-fun-whd N {coq.reduction.lazy.whd Ty} X Out.
expand-fun N Ty X Out :- !, coq.error (expand-fun N Ty X Out).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
pred expand-term-record i:term, i:list term, i:list term, o:ctx term.
expand-term-record (prod N Ty Bo) RevApp [F|FS] Out :- !,
  join-ctx {expand-term N Ty F []}
    (t1\ expand-term-record (Bo F) [t1|RevApp] FS) Out.
expand-term-record (let _ _ T Bo) RevApp FS Out :- !,
  expand-term-record (Bo T) RevApp FS Out.
expand-term-record _ RevApp [] (ctx-end (app Out)) :- !, std.rev RevApp Out.
expand-term-record Ty RevApp FS Out :- !,
  coq.error (expand-term-record Ty RevApp FS Out).

pred expand-term i:name, o:term, i:term, i:list term, o:ctx term.
expand-term _ _ (global (indc K) as T) Stack Out :-
  expand-record _ NParams K KTy _, !,
  std.split-at NParams Stack Params Fields,
  expand-term-record
    {coq.subst-prod Params KTy} {std.rev [T|Params]} Fields Out.
expand-term N Ty (global (const C)) Stack Out :-
  expand-constant C T, !,
  expand-term N Ty T Stack Out.
expand-term N Ty (global (const P)) Stack Out :-
  expand-projection P K NParams Idx,
  std.drop NParams Stack [app [global (indc K)|KArgs]|Stack'],
  std.nth {calc (NParams + Idx)} KArgs F, !,
  expand-term N Ty F Stack' Out.
expand-term N Ty (fun N' Ty' Bo) [] Out :- !,
  coq.unify-eq Ty (prod N' Ty' TyF) ok,
  (@pi-decl N' Ty' x\
    expand-fun N' Ty' x (Out1 x),
    map-ctx (Out1 x) (x'\ expand-term N (TyF x') (Bo x') []) (Out2 x)),
  map-ctx {push-fun-ctx Out2} (f\ t\ t = fun N' Ty' f) Out.
expand-term N Ty (fun N' Ty' Bo) [T|Stack] Out :- !,
  push-let-ctx
    {map-ctx {expand-term N' Ty' T []} (t1\ expand-term N Ty (Bo t1) Stack)}
    Out.
expand-term N Ty (let N' Ty' T Bo) Stack Out :- !,
  push-let-ctx
    {map-ctx {expand-term N' Ty' T []} (t1\ expand-term N Ty (Bo t1) Stack)}
    Out.
expand-term N Ty (app [HD|Args]) Stack Out :- !,
  expand-term N Ty HD {std.append Args Stack} Out.
% TODO: match and fix here
expand-term N Ty T Stack (ctx-let N Ty Out ctx-end) :- !,
  coq.mk-app T Stack Out,
  std.assert-ok! (coq.typecheck Out Ty) "An expanded term is ill-typed".
expand-term N Ty T Stack Out :- !,
  coq.error (expand-term N Ty T Stack Out).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
pred decl-expanded-constants i:id, i:ctx term, o:term.
decl-expanded-constants NewName (ctx-let _ Ty T E) Out :- !,
  std.assert-ok! (coq.typecheck T Ty) "An expanded term is ill-typed",
  coq.env.fresh-global-id NewName ConstName,
  coq.env.add-const ConstName T Ty _ NewConst,
  coq.say ConstName "is defined",
  decl-expanded-constants NewName (E (global (const NewConst))) Out.
decl-expanded-constants _ (ctx-end T) T :- !,
  std.assert-ok! (coq.typecheck T _) "An expanded term is ill-typed".

pred expand-gref i:id, i:gref, o:prop.
expand-gref NewName (const C) (expand-constant C Out) :- !,
  std.assert! (coq.env.const C (some Bo) Ty)
    "only transparent constants can be expanded", !,
  expand-term {coq.id->name "_"} Ty Bo [] E, !,
  decl-expanded-constants NewName E Out.
expand-gref NewName GR Clause :- !, coq.error (expand-gref NewName GR Clause).

% Entry point ------------------------------------------------------------------
main [str In, str Prefix] :- !,
  std.assert! (coq.locate In GR) "The first argument must be a global term",
  NewName is Prefix ^ {coq.gref->id GR},
  expand-gref NewName GR Clause,
  coq.elpi.accumulate _ "record.expand.db"
    (clause _ (before "expand-constant:start") Clause).
main _ :- !, coq.error "usage: Elpi record.expand global_term prefix".
